━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  카카오톡 전송 기능 - HTML 코드
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

■■■ 1. 공유 버튼 (산출 결과 화면) ■■■

<button onclick="shareResult()" class="share-btn" style="margin: 10px auto; display: block; padding: 15px 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; border-radius: 10px; font-size: 16px; font-weight: 600; cursor: pointer;">
    📤 공유하기
</button>


■■■ 2. Canvas 요소 (이미지 생성용) ■■■

<canvas id="resultCanvas" style="display: none;"></canvas>


■■■ 3. JavaScript 함수들 ■■■

<script>
// ============================================
// 공유하기 메인 함수
// ============================================
async function shareResult() {
    // 모바일 여부 확인
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // 로딩 모달 표시
    const loadingModal = document.createElement('div');
    loadingModal.className = 'share-modal show';
    loadingModal.innerHTML = `
        <div class="share-modal-content">
            <div class="loading">
                <div class="spinner"></div>
                <p>이미지 생성 중...</p>
            </div>
        </div>
    `;
    document.body.appendChild(loadingModal);
    
    // 이미지 생성
    const imageBlob = await generateImage();
    const imageUrl = URL.createObjectURL(imageBlob);
    
    // 로딩 모달 제거
    loadingModal.remove();
    
    // 공유 모달 생성
    const modal = document.createElement('div');
    modal.className = 'share-modal show';
    modal.id = 'shareModal';
    
    let infoHTML = '';
    if (isMobile) {
        infoHTML = `<div class="info-message">💡 <strong>카카오톡</strong>: 이미지로 공유 | <strong>문자/이메일</strong>: 텍스트로 전송</div>`;
    } else {
        infoHTML = `<div class="info-message">💡 <strong>카카오톡</strong>: 이미지 저장 후 전송 | <strong>문자/이메일</strong>: 텍스트로 전송</div>`;
    }
    
    modal.innerHTML = `
        <div class="share-modal-content">
            <h3>📤 공유 방법 선택</h3>
            <div class="image-preview">
                <img src="${imageUrl}" alt="산출 결과">
            </div>
            ${infoHTML}
            <div class="share-buttons">
                <button class="share-btn kakao-btn" onclick="shareToKakaoText()">
                    💬 카카오톡 (이미지)
                </button>
                <button class="share-btn sms-btn" onclick="shareSMS()">
                    💌 문자 (텍스트)
                </button>
                <button class="share-btn email-btn" onclick="shareEmail()">
                    📧 이메일 (텍스트)
                </button>
                <button class="share-btn cancel-btn" onclick="closeShareModal()">
                    취소
                </button>
            </div>
        </div>
    `;
    
    // 모달 외부 클릭 시 닫기
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeShareModal();
        }
    });
    
    document.body.appendChild(modal);
    
    // 전역 변수에 저장
    window.currentImageBlob = imageBlob;
    window.currentImageUrl = imageUrl;
}


// ============================================
// 카카오톡으로 이미지 전송 (Web Share API 사용)
// ============================================
async function shareToKakaoText() {
    const imageBlob = window.currentImageBlob;
    
    if (!imageBlob) {
        showToast('❌ 이미지 생성 실패');
        return;
    }
    
    // 모바일 여부 확인
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // Web Share API 지원 확인
    if (navigator.share) {
        try {
            // 이미지 파일로 변환
            const file = new File([imageBlob], `${currentSiteName}_석고보드산출.png`, { type: 'image/png' });
            
            // 파일 공유 가능 여부 확인
            if (navigator.canShare && navigator.canShare({ files: [file] })) {
                // 파일로 공유
                await navigator.share({
                    title: `${currentSiteName} - 석고보드 물량산출`,
                    files: [file]
                });
                showToast('✅ 공유 완료!');
                closeShareModal();
            } else {
                // 파일 공유 안되면 이미지 URL로 시도
                const imageUrl = window.currentImageUrl;
                await navigator.share({
                    title: `${currentSiteName} - 석고보드 물량산출`,
                    text: '석고보드 물량 산출 결과입니다.',
                    url: imageUrl
                });
                showToast('✅ 공유 완료!');
                closeShareModal();
            }
        } catch (error) {
            // 사용자가 취소한 경우
            if (error.name === 'AbortError') {
                console.log('사용자가 공유를 취소했습니다.');
            } else {
                // 다른 오류 - 다운로드로 대체
                console.error('공유 실패:', error);
                showToast('💾 이미지를 다운로드합니다...');
                downloadImage();
            }
        }
    } else {
        // Web Share API 미지원 - PC 또는 구형 브라우저
        showToast('💾 이미지를 다운로드합니다...');
        downloadImage();
    }
}


// ============================================
// Canvas로 이미지 생성
// ============================================
function generateImage() {
    const canvas = document.getElementById('resultCanvas');
    const ctx = canvas.getContext('2d');
    
    // Canvas 크기 설정 (고해상도)
    const width = 800;
    let height = 600;
    canvas.width = width;
    canvas.height = height;
    
    // 배경색
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, width, height);
    
    let y = 40;
    
    // 헤더 배경
    const gradient = ctx.createLinearGradient(0, 0, width, 0);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, 120);
    
    // 제목
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 32px Malgun Gothic';
    ctx.textAlign = 'center';
    ctx.fillText('📊 석고보드 물량 산출', width / 2, y + 25);
    
    // 현장명
    ctx.font = 'bold 24px Malgun Gothic';
    ctx.fillText(currentSiteName || '석고보드 산출', width / 2, y + 60);
    
    y = 140;
    
    // 정보 박스 배경
    ctx.fillStyle = '#f8f9fa';
    ctx.fillRect(30, y, width - 60, 50);
    ctx.strokeStyle = '#e0e0e0';
    ctx.lineWidth = 2;
    ctx.strokeRect(30, y, width - 60, 50);
    
    // 작성일과 로스율
    ctx.fillStyle = '#333333';
    ctx.font = '16px Malgun Gothic';
    ctx.textAlign = 'left';
    const dateStr = new Date().toLocaleString('ko-KR', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
    ctx.fillText(`작성일: ${dateStr}`, 50, y + 30);
    ctx.fillText(`로스율: ${Math.round(currentLossRate * 100)}%`, 550, y + 30);
    
    y += 80;
    
    // 석고보드, 목자재, 경량철골 집계
    const groupedByType = {};
    const groupedByWood = {};
    const groupedBySteel = {};
    
    walls.forEach(wall => {
        if (wall.width && wall.height) {
            const area = (wall.width * wall.height) / 1000000;
            const boardArea = getBoardArea(wall.boardSize);
            let boards = (area / boardArea);
            boards *= (wall.constructionSide === '2P' ? 2 : 1);
            boards *= (wall.faceDirection === '양면' ? 2 : 1);
            boards *= (1 + currentLossRate);
            const finalBoards = Math.ceil(boards);
            
            // 석고보드 집계
            const boardKey = `${wall.boardType}-${wall.boardSize}-${wall.boardThickness}`;
            if (!groupedByType[boardKey]) {
                groupedByType[boardKey] = {
                    type: wall.boardType,
                    size: wall.boardSize,
                    thickness: wall.boardThickness,
                    totalBoards: 0
                };
            }
            groupedByType[boardKey].totalBoards += finalBoards;
            
            // 목자재 집계
            if (wall.joistType === '목자재') {
                const joistKey = wall.woodType;
                if (!groupedByWood[joistKey]) {
                    groupedByWood[joistKey] = { 
                        name: wall.woodType, 
                        length: '2700mm',
                        count: 0 
                    };
                }
                const verticalCount = Math.floor(wall.width / wall.joistSpacing) + 1;
                const horizontal = Math.ceil(wall.width / 2700) * 2;
                let total = verticalCount + horizontal;
                total *= (wall.faceDirection === '양면' ? 2 : 1);
                groupedByWood[joistKey].count += Math.ceil(total * (1 + currentLossRate));
            }
            
            // 경량철골 집계
            if (wall.joistType === '경량철골') {
                const spacing = 450;
                
                // 러너 계산
                const runnerKey = `러너-${wall.steelThickness}-${wall.steelLength}`;
                if (!groupedBySteel[runnerKey]) {
                    groupedBySteel[runnerKey] = {
                        type: '러너',
                        thickness: wall.steelThickness,
                        length: wall.steelLength,
                        count: 0
                    };
                }
                let runnerPieces = Math.ceil(wall.width / wall.steelLength) * 2;
                runnerPieces *= (wall.faceDirection === '양면' ? 2 : 1);
                groupedBySteel[runnerKey].count += Math.ceil(runnerPieces * (1 + currentLossRate));
                
                // 스터드 계산
                const studKey = `스터드-${wall.steelThickness}-${wall.steelLength}`;
                if (!groupedBySteel[studKey]) {
                    groupedBySteel[studKey] = {
                        type: '스터드',
                        thickness: wall.steelThickness,
                        length: wall.steelLength,
                        count: 0
                    };
                }
                const studCount = Math.floor(wall.width / spacing) + 1;
                const piecesPerStud = Math.ceil(wall.height / wall.steelLength);
                let totalStud = studCount * piecesPerStud;
                totalStud *= (wall.faceDirection === '양면' ? 2 : 1);
                groupedBySteel[studKey].count += Math.ceil(totalStud * (1 + currentLossRate));
            }
        }
    });
    
    // 석고보드 섹션
    ctx.fillStyle = '#667eea';
    ctx.font = 'bold 22px Malgun Gothic';
    ctx.fillText('■ 석고보드', 50, y);
    y += 35;
    
    // 석고보드 테이블 헤더
    ctx.fillStyle = '#f0f0f0';
    ctx.fillRect(30, y, width - 60, 40);
    ctx.strokeStyle = '#cccccc';
    ctx.strokeRect(30, y, width - 60, 40);
    
    ctx.fillStyle = '#333333';
    ctx.font = 'bold 16px Malgun Gothic';
    ctx.fillText('종류', 50, y + 25);
    ctx.fillText('규격', 250, y + 25);
    ctx.fillText('두께', 450, y + 25);
    ctx.fillText('수량', 620, y + 25);
    
    y += 40;
    
    // 석고보드 데이터
    ctx.font = '16px Malgun Gothic';
    let boardIndex = 0;
    Object.keys(groupedByType).forEach(key => {
        const board = groupedByType[key];
        
        if (boardIndex % 2 === 0) {
            ctx.fillStyle = '#ffffff';
        } else {
            ctx.fillStyle = '#f9f9f9';
        }
        ctx.fillRect(30, y, width - 60, 40);
        ctx.strokeStyle = '#e0e0e0';
        ctx.strokeRect(30, y, width - 60, 40);
        
        ctx.fillStyle = '#333333';
        ctx.fillText(board.type, 50, y + 25);
        ctx.fillText(board.size, 250, y + 25);
        ctx.fillText(board.thickness, 450, y + 25);
        ctx.fillText(`${board.totalBoards}장`, 620, y + 25);
        
        y += 40;
        boardIndex++;
    });
    
    y += 20;
    
    // 목자재/각재 섹션
    if (Object.keys(groupedByWood).length > 0) {
        ctx.fillStyle = '#764ba2';
        ctx.font = 'bold 22px Malgun Gothic';
        ctx.fillText('■ 목자재/각재', 50, y);
        y += 35;
        
        ctx.fillStyle = '#f0f0f0';
        ctx.fillRect(30, y, width - 60, 40);
        ctx.strokeStyle = '#cccccc';
        ctx.strokeRect(30, y, width - 60, 40);
        
        ctx.fillStyle = '#333333';
        ctx.font = 'bold 16px Malgun Gothic';
        ctx.fillText('품명', 50, y + 25);
        ctx.fillText('길이', 400, y + 25);
        ctx.fillText('수량', 620, y + 25);
        
        y += 40;
        
        ctx.font = '16px Malgun Gothic';
        let woodIndex = 0;
        Object.keys(groupedByWood).forEach(key => {
            const wood = groupedByWood[key];
            
            if (woodIndex % 2 === 0) {
                ctx.fillStyle = '#ffffff';
            } else {
                ctx.fillStyle = '#f9f9f9';
            }
            ctx.fillRect(30, y, width - 60, 40);
            ctx.strokeStyle = '#e0e0e0';
            ctx.strokeRect(30, y, width - 60, 40);
            
            ctx.fillStyle = '#333333';
            ctx.fillText(wood.name, 50, y + 25);
            ctx.fillText(wood.length, 400, y + 25);
            ctx.fillText(`${wood.count}개`, 620, y + 25);
            
            y += 40;
            woodIndex++;
        });
        
        y += 20;
    }
    
    // 경량철골 섹션
    if (Object.keys(groupedBySteel).length > 0) {
        ctx.fillStyle = '#e74c3c';
        ctx.font = 'bold 22px Malgun Gothic';
        ctx.fillText('■ 경량철골', 50, y);
        y += 35;
        
        ctx.fillStyle = '#f0f0f0';
        ctx.fillRect(30, y, width - 60, 40);
        ctx.strokeStyle = '#cccccc';
        ctx.strokeRect(30, y, width - 60, 40);
        
        ctx.fillStyle = '#333333';
        ctx.font = 'bold 16px Malgun Gothic';
        ctx.fillText('구분', 50, y + 25);
        ctx.fillText('두께', 280, y + 25);
        ctx.fillText('길이', 450, y + 25);
        ctx.fillText('수량', 620, y + 25);
        
        y += 40;
        
        ctx.font = '16px Malgun Gothic';
        let steelIndex = 0;
        Object.keys(groupedBySteel).forEach(key => {
            const steel = groupedBySteel[key];
            
            if (steelIndex % 2 === 0) {
                ctx.fillStyle = '#ffffff';
            } else {
                ctx.fillStyle = '#f9f9f9';
            }
            ctx.fillRect(30, y, width - 60, 40);
            ctx.strokeStyle = '#e0e0e0';
            ctx.strokeRect(30, y, width - 60, 40);
            
            ctx.fillStyle = '#333333';
            ctx.fillText(steel.type, 50, y + 25);
            ctx.fillText(`${steel.thickness}mm`, 280, y + 25);
            ctx.fillText(`${steel.length}mm`, 450, y + 25);
            ctx.fillText(`${steel.count}개`, 620, y + 25);
            
            y += 40;
            steelIndex++;
        });
        
        y += 20;
    }
    
    // Canvas 높이 조정
    canvas.height = y + 40;
    
    // Canvas를 Blob으로 변환
    return new Promise((resolve) => {
        canvas.toBlob((blob) => {
            resolve(blob);
        }, 'image/png');
    });
}


// ============================================
// 공유 모달 닫기
// ============================================
function closeShareModal() {
    const modal = document.getElementById('shareModal');
    if (modal) modal.remove();
    // URL 정리
    if (window.currentImageUrl) {
        URL.revokeObjectURL(window.currentImageUrl);
    }
}


// ============================================
// 이미지 다운로드
// ============================================
function downloadImage() {
    const imageUrl = window.currentImageUrl;
    
    if (!imageUrl) {
        showToast('이미지 생성 실패');
        return;
    }
    
    // 다운로드 링크 생성
    const link = document.createElement('a');
    const fileName = `${currentSiteName}_석고보드산출_${new Date().getTime()}.png`;
    link.href = imageUrl;
    link.download = fileName;
    link.click();
    
    showToast('💾 이미지가 저장되었습니다!');
}


// ============================================
// 토스트 메시지
// ============================================
function showToast(message) {
    let toast = document.getElementById('toast');
    if (!toast) {
        toast = document.createElement('div');
        toast.className = 'toast';
        toast.id = 'toast';
        document.body.appendChild(toast);
    }
    
    toast.innerHTML = message.replace(/\n/g, '<br>');
    toast.classList.add('show');
    
    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}
</script>


■■■ 4. CSS 스타일 ■■■

<style>
/* 공유 모달 */
.share-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 3000;
    display: none;
    justify-content: center;
    align-items: center;
    padding: 20px;
}

.share-modal.show {
    display: flex;
}

.share-modal-content {
    background: white;
    padding: 25px;
    border-radius: 15px;
    max-width: 500px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    animation: slideUp 0.3s ease;
}

@keyframes slideUp {
    from { transform: translateY(50px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

.share-modal h3 {
    text-align: center;
    margin: 0 0 20px 0;
    color: #333;
    font-size: 1.3rem;
}

.image-preview {
    width: 100%;
    margin-bottom: 20px;
    border: 2px solid #e0e0e0;
    border-radius: 10px;
    overflow: hidden;
    background: white;
}

.image-preview img {
    width: 100%;
    display: block;
}

.info-message {
    background: #e3f2fd;
    border-left: 4px solid #2196F3;
    padding: 12px;
    margin-bottom: 15px;
    border-radius: 5px;
    font-size: 0.9rem;
    color: #1565C0;
    line-height: 1.5;
}

.share-buttons {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.share-btn {
    padding: 15px 20px;
    border: none;
    border-radius: 10px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
}

.kakao-btn {
    background: #FEE500;
    color: #000000;
}

.kakao-btn:hover {
    background: #FFEB3B;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(254, 229, 0, 0.4);
}

.sms-btn {
    background: #00c73c;
    color: white;
}

.sms-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 199, 60, 0.4);
}

.email-btn {
    background: #EA4335;
    color: white;
}

.email-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(234, 67, 53, 0.4);
}

.cancel-btn {
    background: #e0e0e0;
    color: #666;
}

.cancel-btn:hover {
    background: #d0d0d0;
}

/* 로딩 스피너 */
.loading {
    text-align: center;
    padding: 30px;
    font-size: 18px;
    color: #666;
}

.spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #667eea;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 20px auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* 토스트 메시지 */
.toast {
    position: fixed;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    background: #323232;
    color: white;
    padding: 16px 24px;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    z-index: 4000;
    display: none;
    max-width: 90%;
    text-align: center;
}

.toast.show {
    display: block;
    animation: fadeInOut 3s ease;
}

@keyframes fadeInOut {
    0%, 100% { opacity: 0; transform: translateX(-50%) translateY(20px); }
    10%, 90% { opacity: 1; transform: translateX(-50%) translateY(0); }
}
</style>


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  동작 방식 설명
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

【 카카오톡 전송 흐름 】

1. shareResult() 호출
   → 이미지 생성 중 로딩 표시
   
2. generateImage() 실행
   → Canvas로 산출 결과를 이미지(PNG)로 변환
   → 석고보드, 목자재, 경량철골 정보 포함
   
3. 공유 모달 표시
   → 생성된 이미지 미리보기
   → 카카오톡/문자/이메일 선택 버튼
   
4. shareToKakaoText() 실행
   → Web Share API 지원 체크
   → 파일 공유 가능 시: 이미지 파일로 직접 공유
   → 파일 공유 불가 시: 이미지 URL로 공유
   → API 미지원 시: 이미지 다운로드

【 현재 방식 】
✅ 카카오톡: 이미지로 전송 (Canvas PNG)
✅ 문자: 텍스트로 전송
✅ 이메일: 텍스트로 전송

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



